#!/usr/bin/env python
# -*- coding: utf-8 -*-

import flet as ft
import yaml
import sys

import http.server
import socketserver

help_file_name="Help/webServer.yaml"

PORT = 8000
DIRECTORY = ""

class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)

def load_init_file(help_file_name):
    help = {}
    try:
        with open(help_file_name, mode='r', encoding='utf-8') as f:
            help = yaml.safe_load(f)
    except Exception as e:
        error = 'Exception occurred while loading config file of this application...'
        return [error , help]
    return ['', help]

def errorWindow(page: ft.Page):
    global error
    page.title = "Error"
    page.window.width = 400
    page.window.height = 500
    page.autoscroll = True
    appBar = ft.AppBar(title=ft.Text("Error"),bgcolor=ft.Colors.RED)
    error_field = ft.Text(error)
    line = ft.Divider(height=2, color="black")
    finish_button = ft.ElevatedButton(text="Close", on_click=lambda e: page.window.destroy())
    page.add(
        appBar,
        error_field,
        line,
        finish_button)

def icon_clicked(e):
    ft.app(target=helpWindow)

def helpWindow(page: ft.Page):
    global helpPageName, help
    page.title = "Help"
    page.window.width = 400
    page.window.height = 500
    page.autoscroll = True
    help_contents = ft.Markdown(help[helpPageName], selectable=True, extension_set=ft.MarkdownExtensionSet.GITHUB_WEB)
    page.add(help_contents)

def fileWindow(page: ft.Page):
    def pick_directory_result(e: ft.FilePickerResultEvent):
        global DIRECTORY
        if e.path:
            DIRECTORY = e.path
            selected_directory.value = e.path
        else:
            selected_directory.value = "Canceled."
        selected_directory.update()

    def exec_button_clicked(e):
        global DIRECTORY
        if (DIRECTORY==""):
            warning_message.value = "Please select input file."
            warning_message.update()
            return
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            warning_message.value = "Simple web server start at localhost:"+str(PORT)
            warning_message.update()
            #print("serving at port", PORT)
            httpd.serve_forever()

    appBar = ft.AppBar(
            title=ft.Text("Simple data visualization HTTP Server"),
            bgcolor=ft.Colors.BLUE,
            actions=[
                ft.IconButton(icon = ft.Icons.HELP_CENTER, on_click=icon_clicked),
            ]
        )
    subTitle1 = ft.Text("Web server root directory", style=ft.TextThemeStyle.TITLE_MEDIUM)
    pick_directory_dialog = ft.FilePicker(on_result=pick_directory_result)
    config_file_button = ft.ElevatedButton(
            "select directory",
            icon=ft.Icons.UPLOAD_FILE,
            on_click=lambda _: pick_directory_dialog.get_directory_path(),
        )
    selected_directory = ft.Text()
    line = ft.Divider(height=2, color="black")

    page.title = "Simple web server"
    #page.window_width = 200
    #page.window_height = 300
    page.window.width = 500
    page.window.height = 500

    page.overlay.append(pick_directory_dialog)

    exec_button = ft.ElevatedButton(text="Start web server", on_click=exec_button_clicked)
    warning_message = ft.Text()
    row = ft.Row(
            [
                exec_button,
                warning_message,
            ]
        )
    finish_button = ft.ElevatedButton(text="finish", on_click=lambda e: page.window.destroy())
    lv = ft.ListView(expand=1, spacing=10, padding=20, auto_scroll=True)
    lv.controls.append(subTitle1)
    lv.controls.append(config_file_button)
    lv.controls.append(selected_directory)
    lv.controls.append(line)
    lv.controls.append(row)
    lv.controls.append(finish_button)

    page.add(
        appBar,
        lv
    )


if __name__ == "__main__":
    global error, help
    [error, help] = load_init_file(help_file_name)
    if "" == error:
        ft.app(target=fileWindow)
    else:
        ft.app(target=errorWindow)



    #with socketserver.TCPServer(("", PORT), Handler) as httpd:
    #    print("serving at port", PORT)
    #    httpd.serve_forever()
